import 'package:flutter/material.dart';
import 'package:foodapp/data/model/helper.dart';
import 'package:intl/intl.dart';
import '../data/model/request.dart';
import 'package:intl/date_symbol_data_local.dart';

import '../data/model/requestdetail.dart';
import '../data/repository/repository.dart';

enum RequestStatus { pending, confirmed, inProgress, completed, canceled }

extension RequestStatusExtension on RequestStatus {
  String get title {
    switch (this) {
      case RequestStatus.pending:
        return 'Chờ xác nhận';
      case RequestStatus.confirmed:
        return 'Đã xác nhận';
      case RequestStatus.inProgress:
        return 'Đang thực hiện';
      case RequestStatus.completed:
        return 'Hoàn thành';
      case RequestStatus.canceled:
        return 'Đã hủy';
    }
  }

  String get description {
    switch (this) {
      case RequestStatus.pending:
        return 'Đơn hàng đang chờ xác nhận';
      case RequestStatus.confirmed:
        return 'Đơn hàng đã được xác nhận';
      case RequestStatus.inProgress:
        return 'Đơn hàng đang được thực hiện';
      case RequestStatus.completed:
        return 'Dịch vụ đã hoàn thành';
      case RequestStatus.canceled:
        return 'Đơn hàng đã bị hủy';
    }
  }

  IconData get icon {
    switch (this) {
      case RequestStatus.pending:
        return Icons.hourglass_empty;
      case RequestStatus.confirmed:
        return Icons.check_circle;
      case RequestStatus.inProgress:
        return Icons.cleaning_services;
      case RequestStatus.completed:
        return Icons.task_alt;
      case RequestStatus.canceled:
        return Icons.cancel;
    }
  }

  Color get color {
    switch (this) {
      case RequestStatus.pending:
        return Colors.orange;
      case RequestStatus.confirmed:
        return Colors.blue;
      case RequestStatus.inProgress:
        return Colors.green;
      case RequestStatus.completed:
        return Colors.green;
      case RequestStatus.canceled:
        return Colors.red;
    }
  }
}

class OrderDetailPage extends StatefulWidget {
  final Requests request;
  final List<Helper> helpers;

  const OrderDetailPage({
    super.key,
    required this.request,
    required this.helpers,
  });

  @override
  State<OrderDetailPage> createState() => _OrderDetailPageState();
}

class _OrderDetailPageState extends State<OrderDetailPage> {
  late List<RequestDetail>? requestDetailData = [];
  final List<Helper> requestHelpers = [];
  RequestStatus currentStatus = RequestStatus.confirmed; // Default status
  double promotion = 5000;

  @override
  void initState() {
    super.initState();
    initializeDateFormatting('vi_VN', null);
    loadRequestDetailData(widget.request);
    // Load status from request (implement based on your data model)
    // _determineRequestStatus();
  }

  // void _determineRequestStatus() {
  //   // Logic to determine the status based on your request data
  //   setState(() {
  //     currentStatus = RequestStatus.inProgress; // Example
  //   });
  // }

  Future<void> loadRequestDetailData(Requests request) async {
    var repository = DefaultRepository();
    if (request.scheduleIds.isNotEmpty) {
      var data = await repository.loadRequestDetailId(request.scheduleIds);
      setState(() {
        requestDetailData = data ?? [];
        _loadHelperData();
      });
    }
  }

  void _loadHelperData() {
    requestHelpers.clear();
    for (var data in requestDetailData!) {
      try {
        var helper = widget.helpers.firstWhere((h) => h.id == data.helperID);
        if (!requestHelpers.contains(helper)) {
          requestHelpers.add(helper);
        }
      } catch (e) {
        print('Helper not found for ID: ${data.helperID}');
      }
    }
  }

  String _formatCurrency(double amount) {
    final NumberFormat formatter = NumberFormat("#,###", "vi_VN");
    double roundedAmount = (amount / 1000).ceil() * 1000;
    return "${formatter.format(roundedAmount)} đ";
  }

  String _formatDate(String dateStr) {
    DateTime dateTime = DateTime.parse(dateStr).toLocal();
    return DateFormat("EEEE, dd 'Tháng' MM, yyyy - HH:mm", "vi_VN")
        .format(dateTime);
  }

  @override
  Widget build(BuildContext context) {
    return Scaffold(
      backgroundColor: Colors.grey.shade50,
      body: CustomScrollView(
        slivers: [
          _buildAppBar(),
          SliverPadding(
            padding: const EdgeInsets.symmetric(horizontal: 20),
            sliver: SliverList(
              delegate: SliverChildListDelegate([
                const SizedBox(height: 20),
                _buildStatusTracker(),
                const SizedBox(height: 24),
                _buildStatusCard(),
                const SizedBox(height: 24),
                _buildCustomerInfo(),
                const SizedBox(height: 24),
                if (requestHelpers.isNotEmpty) _buildHelperInfo(),
                if (requestHelpers.isNotEmpty) const SizedBox(height: 24),
                _buildServiceDetails(),
                const SizedBox(height: 24),
                _buildPaymentSummary(),
                const SizedBox(height: 24),
                _buildSupportSection(),
                const SizedBox(height: 100),
              ]),
            ),
          ),
        ],
      ),
      bottomNavigationBar: _buildBottomActions(),
    );
  }

  Widget _buildAppBar() {
    return SliverAppBar(
      leading: IconButton(
        icon: const Icon(Icons.arrow_back_ios, color: Colors.white),
        onPressed: () {
          Navigator.pop(context);
        },
      ),
      expandedHeight: 60,
      pinned: true,
      stretch: true,
      backgroundColor: Colors.green,
      elevation: 0,
      flexibleSpace: FlexibleSpaceBar(
        title: const Text(
          'Chi tiết đơn hàng',
          style: TextStyle(
            color: Colors.white,
            fontSize: 18,
            fontWeight: FontWeight.w800,
            fontFamily: 'Quicksand',
          ),
        ),
        background: Container(
          decoration: const BoxDecoration(
            color: Colors.green,
          ),
        ),
      ),
    );
  }

  Widget _buildStatusTracker() {
    final List<RequestStatus> allStatuses = RequestStatus.values;
    final currentIndex = allStatuses.indexOf(currentStatus);

    return Container(
      padding: const EdgeInsets.symmetric(vertical: 20, horizontal: 15),
      decoration: BoxDecoration(
        color: Colors.white,
        borderRadius: BorderRadius.circular(16),
        boxShadow: [
          BoxShadow(
            color: Colors.black.withOpacity(0.05),
            blurRadius: 10,
            offset: const Offset(0, 4),
          ),
        ],
      ),
      child: Column(
        crossAxisAlignment: CrossAxisAlignment.start,
        children: [
          const Text(
            'Trạng thái đơn hàng',
            style: TextStyle(
              fontSize: 16,
              fontWeight: FontWeight.bold,
              fontFamily: 'Quicksand',
            ),
          ),
          const SizedBox(height: 20),
          Row(
            children: List.generate(allStatuses.length, (index) {
              final status = allStatuses[index];
              final isCompleted = index <= currentIndex;
              final isCurrent = index == currentIndex;

              return Expanded(
                child: Column(
                  children: [
                    Container(
                      width: 36,
                      height: 36,
                      decoration: BoxDecoration(
                        color: isCompleted
                            ? status.color
                            : Colors.grey.withOpacity(0.2),
                        shape: BoxShape.circle,
                        border: isCurrent
                            ? Border.all(
                                color: status.color.withOpacity(0.5),
                                width: 4,
                              )
                            : null,
                      ),
                      child: Icon(
                        status.icon,
                        color: isCompleted ? Colors.white : Colors.grey,
                        size: 20,
                      ),
                    ),
                    const SizedBox(height: 8),
                    Text(
                      status.title,
                      textAlign: TextAlign.center,
                      style: TextStyle(
                        fontSize: 12,
                        fontWeight:
                            isCurrent ? FontWeight.bold : FontWeight.normal,
                        color: isCurrent ? status.color : Colors.grey,
                        fontFamily: 'Quicksand',
                      ),
                    ),
                    // Draw connecting lines
                    if (index < allStatuses.length - 1)
                      Positioned.fill(
                        child: Align(
                          alignment: Alignment.center,
                          child: Container(
                            height: 2,
                            color: isCompleted
                                ? status.color
                                : Colors.grey.withOpacity(0.2),
                          ),
                        ),
                      ),
                  ],
                ),
              );
            }),
          ),
        ],
      ),
    );
  }

  Widget _buildStatusCard() {
    return Container(
      padding: const EdgeInsets.all(20),
      decoration: BoxDecoration(
        color: Colors.white,
        borderRadius: BorderRadius.circular(16),
        boxShadow: [
          BoxShadow(
            color: Colors.black.withOpacity(0.05),
            blurRadius: 10,
            offset: const Offset(0, 4),
          ),
        ],
      ),
      child: Column(
        children: [
          Row(
            children: [
              Container(
                padding: const EdgeInsets.all(12),
                decoration: BoxDecoration(
                  color: currentStatus.color.withOpacity(0.1),
                  shape: BoxShape.circle,
                ),
                child: Icon(currentStatus.icon, color: currentStatus.color),
              ),
              const SizedBox(width: 16),
              Column(
                crossAxisAlignment: CrossAxisAlignment.start,
                children: [
                  Text(
                    currentStatus.title,
                    style: const TextStyle(
                      fontSize: 18,
                      fontWeight: FontWeight.bold,
                      fontFamily: 'Quicksand',
                    ),
                  ),
                  const SizedBox(height: 4),
                  Text(
                    currentStatus.description,
                    style: const TextStyle(
                      color: Colors.grey,
                      fontFamily: 'Quicksand',
                    ),
                  ),
                ],
              ),
            ],
          ),
          if (currentStatus == RequestStatus.confirmed ||
              currentStatus == RequestStatus.inProgress)
            Column(
              children: [
                const SizedBox(height: 16),
                const Divider(),
                const SizedBox(height: 16),
                Row(
                  children: [
                    const Icon(Icons.access_time, color: Colors.grey),
                    const SizedBox(width: 8),
                    Text(
                      'Dự kiến hoàn thành: ${_formatDate(DateTime.now().add(const Duration(hours: 2)).toIso8601String())}',
                      style: const TextStyle(
                        color: Colors.grey,
                        fontFamily: 'Quicksand',
                      ),
                    ),
                  ],
                ),
              ],
            ),
        ],
      ),
    );
  }

  Widget _buildCustomerInfo() {
    return Container(
      padding: const EdgeInsets.all(20),
      decoration: BoxDecoration(
        color: Colors.white,
        borderRadius: BorderRadius.circular(16),
        boxShadow: [
          BoxShadow(
            color: Colors.black.withOpacity(0.05),
            blurRadius: 10,
            offset: const Offset(0, 4),
          ),
        ],
      ),
      child: Column(
        crossAxisAlignment: CrossAxisAlignment.start,
        children: [
          const Text(
            'Thông tin khách hàng',
            style: TextStyle(
              fontSize: 16,
              fontWeight: FontWeight.bold,
              fontFamily: 'Quicksand',
            ),
          ),
          const SizedBox(height: 16),
          Row(
            children: [
              Container(
                padding: const EdgeInsets.all(12),
                decoration: BoxDecoration(
                  color: Colors.green.withOpacity(0.1),
                  shape: BoxShape.circle,
                ),
                child: const Icon(
                  Icons.person_2_outlined,
                  color: Colors.green,
                  size: 32,
                ),
              ),
              const SizedBox(width: 16),
              Expanded(
                child: Column(
                  crossAxisAlignment: CrossAxisAlignment.start,
                  children: [
                    Text(
                      widget.request.customerInfo.fullName,
                      style: const TextStyle(
                        fontSize: 16,
                        fontWeight: FontWeight.w600,
                        fontFamily: 'Quicksand',
                      ),
                    ),
                    const SizedBox(height: 4),
                    Text(
                      widget.request.customerInfo.phone,
                      style: const TextStyle(
                        color: Colors.grey,
                        fontFamily: 'Quicksand',
                      ),
                    ),
                  ],
                ),
              ),
              IconButton(
                onPressed: () {
                  // Implement call functionality
                },
                icon: Container(
                  padding: const EdgeInsets.all(8),
                  decoration: BoxDecoration(
                    color: Colors.green.withOpacity(0.1),
                    shape: BoxShape.circle,
                  ),
                  child: const Icon(
                    Icons.call,
                    color: Colors.green,
                  ),
                ),
              ),
            ],
          ),
        ],
      ),
    );
  }

  Widget _buildHelperInfo() {
    return Container(
      padding: const EdgeInsets.all(20),
      decoration: BoxDecoration(
        color: Colors.white,
        borderRadius: BorderRadius.circular(16),
        boxShadow: [
          BoxShadow(
            color: Colors.black.withOpacity(0.05),
            blurRadius: 10,
            offset: const Offset(0, 4),
          ),
        ],
      ),
      child: Column(
        crossAxisAlignment: CrossAxisAlignment.start,
        children: [
          const Text(
            'Thông tin người giúp việc',
            style: TextStyle(
              fontSize: 16,
              fontWeight: FontWeight.bold,
              fontFamily: 'Quicksand',
            ),
          ),
          const SizedBox(height: 16),
          Column(
            children: requestHelpers.map((helper) {
              return Column(
                children: [
                  Row(
                    children: [
                      Container(
                        width: 50,
                        height: 50,
                        decoration: BoxDecoration(
                          color: Colors.green.withOpacity(0.1),
                          shape: BoxShape.circle,
                        ),
                        child: helper.avatar != null &&
                                helper.avatar!.isNotEmpty
                            ? ClipRRect(
                                borderRadius: BorderRadius.circular(25),
                                child: Image.network(
                                  helper.avatar!,
                                  width: 50,
                                  height: 50,
                                  fit: BoxFit.cover,
                                  errorBuilder: (context, error, stackTrace) {
                                    return const Icon(
                                      Icons.person,
                                      color: Colors.green,
                                      size: 32,
                                    );
                                  },
                                ),
                              )
                            : const Icon(
                                Icons.person,
                                color: Colors.green,
                                size: 32,
                              ),
                      ),
                      const SizedBox(width: 16),
                      Expanded(
                        child: Column(
                          crossAxisAlignment: CrossAxisAlignment.start,
                          children: [
                            Text(
                              // helper.fullName,
                              'Nguyễn Quốc An',
                              style: const TextStyle(
                                fontSize: 16,
                                fontWeight: FontWeight.w600,
                                fontFamily: 'Quicksand',
                              ),
                            ),
                            const SizedBox(height: 4),
                            Row(
                              children: [
                                const Icon(
                                  Icons.star,
                                  color: Colors.amber,
                                  size: 16,
                                ),
                                const SizedBox(width: 4),
                                Text(
                                  // '${helper.rating ?? 0.0}',
                                  '4.5sao',
                                  style: TextStyle(
                                    color: Colors.grey,
                                    fontFamily: 'Quicksand',
                                  ),
                                ),
                                const SizedBox(width: 8),
                                Container(
                                  padding: const EdgeInsets.symmetric(
                                      horizontal: 8, vertical: 2),
                                  decoration: BoxDecoration(
                                    color: Colors.green.withOpacity(0.1),
                                    borderRadius: BorderRadius.circular(10),
                                  ),
                                  child: Text(
                                    // helper.status ?? 'Sẵn sàng',
                                    'Sẵn sàng',
                                    style: const TextStyle(
                                      color: Colors.green,
                                      fontSize: 12,
                                      fontFamily: 'Quicksand',
                                    ),
                                  ),
                                ),
                              ],
                            ),
                          ],
                        ),
                      ),
                      IconButton(
                        onPressed: () {
                          // Implement call functionality
                        },
                        icon: Container(
                          padding: const EdgeInsets.all(8),
                          decoration: BoxDecoration(
                            color: Colors.green.withOpacity(0.1),
                            shape: BoxShape.circle,
                          ),
                          child: const Icon(
                            Icons.call,
                            color: Colors.green,
                          ),
                        ),
                      ),
                    ],
                  ),
                  if (requestHelpers.last != helper)
                    const Padding(
                      padding: EdgeInsets.symmetric(vertical: 8),
                      child: Divider(),
                    ),
                ],
              );
            }).toList(),
          ),
        ],
      ),
    );
  }

  Widget _buildServiceDetails() {
    return Container(
      padding: const EdgeInsets.all(20),
      decoration: BoxDecoration(
        color: Colors.white,
        borderRadius: BorderRadius.circular(16),
        boxShadow: [
          BoxShadow(
            color: Colors.black.withOpacity(0.05),
            blurRadius: 10,
            offset: const Offset(0, 4),
          ),
        ],
      ),
      child: Column(
        crossAxisAlignment: CrossAxisAlignment.start,
        children: [
          const Text(
            'Chi tiết dịch vụ',
            style: TextStyle(
              fontSize: 16,
              fontWeight: FontWeight.bold,
              fontFamily: 'Quicksand',
            ),
          ),
          const SizedBox(height: 16),
          _buildServiceItem(
            icon: Icons.cleaning_services_rounded,
            title: widget.request.service.title,
            subtitle: widget.request.service.title,
          ),
          const SizedBox(height: 16),
          _buildServiceItem(
            icon: Icons.location_on_rounded,
            title: widget.request.customerInfo.address,
            subtitle:
                '${widget.request.location.ward}, ${widget.request.location.district}, ${widget.request.location.province}',
          ),
          const SizedBox(height: 16),
          _buildServiceItem(
            icon: Icons.calendar_today_rounded,
            title: _formatDate(widget.request.oderDate),
            subtitle: 'Thời gian đặt lịch',
          ),
          if (requestDetailData!.isNotEmpty)
            Column(
              crossAxisAlignment: CrossAxisAlignment.start,
              children: [
                const SizedBox(height: 16),
                const Divider(),
                const SizedBox(height: 16),
                const Text(
                  'Chi tiết công việc',
                  style: TextStyle(
                    fontSize: 15,
                    fontWeight: FontWeight.w600,
                    fontFamily: 'Quicksand',
                  ),
                ),
                const SizedBox(height: 10),
                ...requestDetailData!.map((detail) {
                  return Padding(
                    padding: const EdgeInsets.only(bottom: 8),
                    child: Row(
                      children: [
                        Container(
                          width: 8,
                          height: 8,
                          decoration: const BoxDecoration(
                            color: Colors.green,
                            shape: BoxShape.circle,
                          ),
                        ),
                        const SizedBox(width: 8),
                        Expanded(
                          child: Text(
                            'Không có mô tả',
                            style: const TextStyle(
                              fontSize: 14,
                              color: Colors.grey,
                              fontFamily: 'Quicksand',
                            ),
                          ),
                        ),
                      ],
                    ),
                  );
                }).toList(),
              ],
            ),
        ],
      ),
    );
  }

  Widget _buildServiceItem({
    required IconData icon,
    required String title,
    required String subtitle,
  }) {
    return Row(
      children: [
        Container(
          padding: const EdgeInsets.all(10),
          decoration: BoxDecoration(
            color: Colors.green.withOpacity(0.1),
            borderRadius: BorderRadius.circular(12),
          ),
          child: Icon(icon, color: Colors.green, size: 22),
        ),
        const SizedBox(width: 16),
        Expanded(
          child: Column(
            crossAxisAlignment: CrossAxisAlignment.start,
            children: [
              Text(
                title,
                style: const TextStyle(
                  fontSize: 15,
                  fontWeight: FontWeight.w500,
                  fontFamily: 'Quicksand',
                ),
              ),
              const SizedBox(height: 4),
              Text(
                subtitle,
                style: const TextStyle(
                  fontSize: 13,
                  color: Colors.grey,
                  fontFamily: 'Quicksand',
                ),
              ),
            ],
          ),
        ),
      ],
    );
  }

  Widget _buildPaymentSummary() {
    return Container(
      padding: const EdgeInsets.all(20),
      decoration: BoxDecoration(
        color: Colors.white,
        borderRadius: BorderRadius.circular(16),
        boxShadow: [
          BoxShadow(
            color: Colors.black.withOpacity(0.05),
            blurRadius: 10,
            offset: const Offset(0, 4),
          ),
        ],
      ),
      child: Column(
        crossAxisAlignment: CrossAxisAlignment.start,
        children: [
          Row(
            mainAxisAlignment: MainAxisAlignment.spaceBetween,
            children: [
              const Text(
                'Thanh toán',
                style: TextStyle(
                  fontSize: 16,
                  fontWeight: FontWeight.bold,
                  fontFamily: 'Quicksand',
                ),
              ),
              Container(
                padding:
                    const EdgeInsets.symmetric(horizontal: 10, vertical: 4),
                decoration: BoxDecoration(
                  color: Colors.green.withOpacity(0.1),
                  borderRadius: BorderRadius.circular(12),
                ),
                child: const Text(
                  'Đã thanh toán',
                  style: TextStyle(
                    color: Colors.green,
                    fontSize: 12,
                    fontWeight: FontWeight.bold,
                    fontFamily: 'Quicksand',
                  ),
                ),
              ),
            ],
          ),
          const SizedBox(height: 16),
          _buildPaymentRow(
            'Chi phí dịch vụ',
            _formatCurrency(
              widget.request.totalCost.toDouble(),
            ),
          ),
          const SizedBox(height: 8),
          _buildPaymentRow('Khuyến mãi', _formatCurrency(promotion)),
          Padding(
            padding: const EdgeInsets.symmetric(vertical: 12),
            child: Divider(
              color: Colors.grey.shade200,
            ),
          ),
          _buildPaymentRow(
            'Tổng thanh toán',
            _formatCurrency(widget.request.totalCost.toDouble() - promotion),
            isTotal: true,
          ),
          Padding(
            padding: const EdgeInsets.symmetric(vertical: 12),
            child: Divider(
              color: Colors.grey.shade200,
            ),
          ),
          _buildPaymentRow(
            'Hình thức thanh toán',
            'Ngân hàng VCB',
            isPaymentMethod: true,
          ),
          if (currentStatus != RequestStatus.canceled &&
              currentStatus != RequestStatus.completed)
            Column(
              children: [
                const SizedBox(height: 16),
                Container(
                  padding: const EdgeInsets.all(12),
                  decoration: BoxDecoration(
                    color: Colors.blue.withOpacity(0.1),
                    borderRadius: BorderRadius.circular(12),
                  ),
                  child: Row(
                    children: [
                      const Icon(Icons.info_outline, color: Colors.blue),
                      const SizedBox(width: 8),
                      const Expanded(
                        child: Text(
                          'Nếu bạn hủy đơn hàng, bạn sẽ được hoàn lại 80% số tiền',
                          style: TextStyle(
                            color: Colors.blue,
                            fontSize: 13,
                            fontFamily: 'Quicksand',
                          ),
                        ),
                      ),
                    ],
                  ),
                ),
              ],
            ),
        ],
      ),
    );
  }

  Widget _buildPaymentRow(String label, String value,
      {bool isTotal = false, bool isPaymentMethod = false}) {
    return Row(
      mainAxisAlignment: MainAxisAlignment.spaceBetween,
      children: [
        Text(
          label,
          style: TextStyle(
            fontSize: isTotal || isPaymentMethod ? 16 : 14,
            fontWeight: isTotal || isPaymentMethod
                ? FontWeight.bold
                : FontWeight.normal,
            color: isTotal || isPaymentMethod ? Colors.black : Colors.grey[600],
            fontFamily: 'Quicksand',
          ),
        ),
        Text(
          value,
          style: TextStyle(
            fontSize: isTotal || isPaymentMethod ? 16 : 14,
            fontWeight: isTotal || isPaymentMethod
                ? FontWeight.bold
                : FontWeight.normal,
            color: isTotal || isPaymentMethod ? Colors.green : Colors.grey[600],
            fontFamily: 'Quicksand',
          ),
        ),
      ],
    );
  }

  Widget _buildSupportSection() {
    return Container(
      padding: const EdgeInsets.all(20),
      decoration: BoxDecoration(
        color: Colors.white,
        borderRadius: BorderRadius.circular(16),
        boxShadow: [
          BoxShadow(
            color: Colors.black.withOpacity(0.05),
            blurRadius: 10,
            offset: const Offset(0, 4),
          ),
        ],
      ),
      child: InkWell(
        onTap: () {},
        borderRadius: BorderRadius.circular(16),
        child: Row(
          mainAxisAlignment: MainAxisAlignment.center,
          children: [
            Container(
              padding: const EdgeInsets.all(8),
              decoration: BoxDecoration(
                color: Colors.green.withOpacity(0.1),
                shape: BoxShape.circle,
              ),
              child: const Icon(
                Icons.support_agent,
                color: Colors.green,
                size: 24,
              ),
            ),
            const SizedBox(width: 12),
            const Text(
              'Bạn cần hỗ trợ ?',
              style: TextStyle(
                fontSize: 16,
                fontWeight: FontWeight.w600,
                fontFamily: 'Quicksand',
              ),
            ),
          ],
        ),
      ),
    );
  }

  Widget _buildBottomActions() {
    return Container(
      padding: const EdgeInsets.all(20),
      decoration: BoxDecoration(
        color: Colors.white,
        boxShadow: [
          BoxShadow(
            color: Colors.black.withOpacity(0.05),
            blurRadius: 10,
            offset: const Offset(0, -4),
          ),
        ],
      ),
      child: Row(
        children: [
          if (currentStatus == RequestStatus.completed)
            Expanded(
              child: ElevatedButton(
                onPressed: () {},
                style: ElevatedButton.styleFrom(
                  backgroundColor: Colors.amber,
                  padding: const EdgeInsets.symmetric(vertical: 16),
                  elevation: 0,
                  shape: RoundedRectangleBorder(
                    borderRadius: BorderRadius.circular(12),
                  ),
                ),
                child: const Row(
                  mainAxisAlignment: MainAxisAlignment.center,
                  children: [
                    Icon(Icons.star, color: Colors.white),
                    SizedBox(width: 8),
                    Text(
                      'Đánh giá',
                      style: TextStyle(
                        fontWeight: FontWeight.w600,
                        color: Colors.white,
                        fontFamily: 'Quicksand',
                      ),
                    ),
                  ],
                ),
              ),
            ),
          if (currentStatus != RequestStatus.completed &&
              currentStatus != RequestStatus.canceled)
            Expanded(
              child: ElevatedButton(
                onPressed: () {
                  // Show cancel confirmation dialog
                  showDialog(
                    context: context,
                    builder: (context) => AlertDialog(
                      title: const Text('Hủy đơn hàng'),
                      content: const Text(
                          'Bạn có chắc chắn muốn hủy đơn hàng này không?'),
                      actions: [
                        TextButton(
                          onPressed: () => Navigator.pop(context),
                          child: const Text('Hủy'),
                        ),
                        TextButton(
                          onPressed: () {
                            // Implement cancel order functionality
                            setState(() {
                              currentStatus = RequestStatus.canceled;
                            });
                            Navigator.pop(context);
                          },
                          child: const Text('Xác nhận'),
                        ),
                      ],
                    ),
                  );
                },
                style: ElevatedButton.styleFrom(
                  backgroundColor: Colors.red,
                  padding: const EdgeInsets.symmetric(vertical: 16),
                  elevation: 0,
                  shape: RoundedRectangleBorder(
                    borderRadius: BorderRadius.circular(12),
                  ),
                ),
                child: const Row(
                  mainAxisAlignment: MainAxisAlignment.center,
                  children: [
                    Icon(Icons.cancel, color: Colors.white),
                    SizedBox(width: 8),
                    Text(
                      'Hủy đơn hàng',
                      style: TextStyle(
                        fontWeight: FontWeight.w600,
                        color: Colors.white,
                        fontFamily: 'Quicksand',
                      ),
                    ),
                  ],
                ),
              ),
            ),
          if (currentStatus == RequestStatus.pending ||
              currentStatus == RequestStatus.confirmed)
            Expanded(
              child: ElevatedButton(
                onPressed: () {
                  // Update status to the next stage
                  setState(() {
                    if (currentStatus == RequestStatus.pending) {
                      currentStatus = RequestStatus.confirmed;
                    } else if (currentStatus == RequestStatus.confirmed) {
                      currentStatus = RequestStatus.inProgress;
                    }
                  });
                },
                style: ElevatedButton.styleFrom(
                  backgroundColor: Colors.green,
                  padding: const EdgeInsets.symmetric(vertical: 16),
                  elevation: 0,
                  shape: RoundedRectangleBorder(
                    borderRadius: BorderRadius.circular(12),
                  ),
                ),
                child: const Row(
                  mainAxisAlignment: MainAxisAlignment.center,
                  children: [
                    Icon(Icons.check_circle, color: Colors.white),
                    SizedBox(width: 8),
                    Text(
                      'Xác nhận',
                      style: TextStyle(
                        fontWeight: FontWeight.w600,
                        color: Colors.white,
                        fontFamily: 'Quicksand',
                      ),
                    ),
                  ],
                ),
              ),
            ),
          if (currentStatus == RequestStatus.inProgress)
            Expanded(
              child: ElevatedButton(
                onPressed: () {
                  // Complete the service
                  setState(() {
                    currentStatus = RequestStatus.completed;
                  });
                },
                style: ElevatedButton.styleFrom(
                  backgroundColor: Colors.green,
                  padding: const EdgeInsets.symmetric(vertical: 16),
                  elevation: 0,
                  shape: RoundedRectangleBorder(
                    borderRadius: BorderRadius.circular(12),
                  ),
                ),
                child: const Row(
                  mainAxisAlignment: MainAxisAlignment.center,
                  children: [
                    Icon(Icons.task_alt, color: Colors.white),
                    SizedBox(width: 8),
                    Text(
                      'Hoàn thành',
                      style: TextStyle(
                        fontWeight: FontWeight.w600,
                        color: Colors.white,
                        fontFamily: 'Quicksand',
                      ),
                    ),
                  ],
                ),
              ),
            ),
        ],
      ),
    );
  }
}
